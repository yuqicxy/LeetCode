/*
 * @lc app=leetcode id=190 lang=cpp
 *
 * [190] Reverse Bits
 */

// 0000 0010 1001 0100 0001 1110 1001 1100
// n = (n >> 16) | (n << 16)  调换前16位与后16位
//((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8) 调换2个16位中的前8位与后八位
    //
    // (n & 0xff00ff00) >> 8 取16位前8位,其他位为0,并右移8位
        // (n & 0xff00ff00)  取16位前8位,其他位为0
        // 0000 0010 0000 0000 0001 1110 0000 0000
        // (n & 0xff00ff00) >> 8
    // 0000 0000 0000 0010 0000 0000 0001 1110
    //
    // (n & 0x00ff00ff) << 8 取16位后8位,其他位为0,并左移8位
        // (n & 0x00ff00ff) 取16位后8位,其他位为0
        // 0000 0000 1001 1100 0000 0000 1001 1100
        // (n & 0x00ff00ff) << 8
    // 1001 0100 0000 0000 1001 1100 0000 0000
// 1001 0100 0000 0010 1001 1100 0001 1110 
// n = ((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4); 调换4个8位中前后4位的顺序
// 0100 1001 0010 0000 1100 1001 1110 0001
// n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2); 调换8个4位中前后2位的顺序
// 0001 0110 1000 0000 0011 0110 1011 0100
// n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1); 调换16个2位中前后顺序
// 0010 1001 0100 0000 0011 1001 0111 1000

// @lc code=start
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        n = (n >> 16) | (n << 16);
        n = ((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8);
        n = ((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4);
        n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2);
        n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1);
        return n;
    }
};
// @lc code=end